from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status
from rest_framework.views import APIView
from rest_framework.permissions import IsAdminUser
from django.core.paginator import Paginator
from django.http import Http404

from api.utils.jwt_utils import get_user_from_request

from ..models.assessment import Assessment, Question, Answer
from ..models.learner import Learner
from ..models.admin import Admin
from ..serializers.assessment import AssessmentSerializer, QuestionSerializer, AnswerSerializer


@api_view(['POST'])
@permission_classes([IsAdminUser])
def create_assessment(request):
    """ creates an assessment """
    if request.method == 'POST':
        serializer = AssessmentSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            response_data = {"message": "Assessment created successfully", "data": serializer.data}
            return Response(response_data, status=status.HTTP_201_CREATED)
        response = { "message": "Something went wrong", "error": serializer.errors}
        return Response(response, status=status.HTTP_400_BAD_REQUEST)
        
class AssessmentDetail(APIView):
    """
    Retrieve, update or delete an assessment instance.
    """
    def get_object(self, pk):
        try:
            return Assessment.objects.get(pk=pk)
        except Assessment.DoesNotExist:
            raise Http404

        def get(self, request, pk, format=None):
            assessment = self.get_object(pk)
            serializer = AssessmentSerializer(assessment)
            return Response(serializer.data)

        def put(self, request, pk, format=None):
            assessment = self.get_object(pk)
            serializer = AssessmentSerializer(assessment, data=request.data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        def delete(self, request, pk, format=None):
            assessment = self.get_object(pk)
            assessment.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)